import os
import tkinter as tk
from tkinter import filedialog
from tkinter.messagebox import *
import glob
import time
import shutil
import webbrowser
from threading import Thread
from tkinter import ttk

dico_mois = {'Jan':'Janvier', 'Feb':'Février', 'Mar':'Mars', 'Apr':'Avril', 'May':'Mai', 'Jun':'Juin',
             'Jul':'Juillet', 'Aug':'Aout', 'Sep':'Septembre','Oct':'Octobre', 'Nov':'Novembre', 'Dec':'Décembre'}


#Pour l'application en général
# Classe Application définit les boutons, taille, titre etc ...

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.dirname_entry = tk.StringVar()
        self.dirname_out = tk.StringVar()

        # La fenêtre générale :
        self.title("Trieur de médias v2.0.0")
        self.configure(bg='#393939')
        self.geometry('650x500')
        self.resizable(width=False, height=False)

        # Création du menu en barre
        self.menubarre = tk.Menu(self)
        self.config(menu = self.menubarre)
        self.file_menu = tk.Menu(self.menubarre, tearoff=False)
        self.menubarre.add_cascade(label="Fichier", menu=self.file_menu)
        self.file_menu.add_command(label='Quitter', command=self.destroy)

        # le menu edition
        self.edition_menu = tk.Menu(self.menubarre, tearoff=False)
        self.menubarre.add_cascade(label="A propos", menu=self.edition_menu)
        self.edition_menu.add_command(label='Dons (Paypal)', command=self.dons)
        self.edition_menu.add_command(label='Notes de version', command=self.note_version)

        # Création des boutons
        self.chemin_entree = tk.Button(height=3, width=30, text="Dossier des médias à trier", font = ('Ebrima', 10), command=self.entry)
        self.chemin_sortie = tk.Button(height=3, width=30, text="Dossier de sortie", font = ('Ebrima', 10), command=self.out)
        self.validation = tk.Button(height=3, width=30, text="Validation", font = ('Ebrima', 10), command=self.progresse_barre)
        self.quitter = tk.Button(height =3, width=30, text="Quitter", background="#E70739", font = ('Ebrima', 10), command=self.destroy)

       # lLa liste pour le choix du média
        self.option_list = ["JPG", "MP4"]
        self.variable = tk.StringVar()
        self.variable.set(self.option_list[0])
        self.option = tk.OptionMenu(self, self.variable, *self.option_list)
        self.option.config(width=10, font=('Ebrima', 10))
        self.variable.trace("w", self.callback)

        #Leurs emplacements
        self.option.place(x=250, y=30)
        self.chemin_entree.place(x=200, y=100)
        self.chemin_sortie.place(x=200, y=200)
        self.validation.place(x=200, y=300)
        self.quitter.place(x=200, y=400)

# Le callback pour identifier chaque changement du choix du format
    def callback(self, *args):
        self.mon_format = self.variable.get()

    # Les fonctions pour l'explorateur (chemin entree et sorite)
    def entry(self):
        self.path_entry = filedialog.askdirectory(parent=app, initialdir="/", title='Choix du dossier')
        self.dirname_entry.set(self.path_entry)
        if self.dirname_entry != ' ':
            self.entree = (self.dirname_entry.get())

    def out(self):
        self.path_out = filedialog.askdirectory(parent=app, initialdir='/', title='Choix du dossier')
        self.dirname_out.set(self.path_out)
        if self.dirname_out != ' ':
            self.sortie = (self.dirname_out.get())

    def dons(self):
        webbrowser.open_new('https://paypal.me/infor28?country.x=FR&locale.x=fr_FR')

# Le menu cascade pour les notes de version qui doivent etre dans le même dossier
    def note_version(self):
        self.fenetre = tk.Toplevel(app)
        self.fenetre.title("Notes de version")
        self.fenetre.configure(bg='#393939')
        self.fenetre.geometry('520x300')

        self.texte = tk.Text(self.fenetre, bg='#393939', fg = 'white')
        self.texte.pack()

        with open("Notes de version.txt", "r", encoding='utf-8') as notes:
            self.notes_versions= notes.read()
        self.texte.insert('1.0', self.notes_versions)
        self.fenetre.mainloop()

    def progresse_barre(self):
        # Création de la barre de progression
        self.pbar = ttk.Progressbar(orient="horizontal", length=400, mode='indeterminate')
        self.pbar.place(x=150, y=317)
        self.pbar.start()

        # execution en utilisant le multithreading pour éviter l'effet plantage
        Thread(target=self.validate).start()



    def validate(self):
        #On test si les repertoires entrée et sortie on bien été renseigné

        if not self.dirname_entry.get().strip():
            self.pbar.destroy()
            showerror(title="Répertoire d'entrée non renseigné", message="Veuillez choisir un dossier en entrée.")


        elif not self.dirname_out.get().strip():
            self.pbar.destroy()
            showerror(title="Répertoire de sortie non renseigné", message="Veuillez choisir un dossier de destination.")

        # Si oui on passe à la suite
        else:
            Tri.format(self, self.variable, self.entree)
            Tri.medias(self)

class Tri :
    def __init__(self):
        pass

# On récupère le bon format choisit (par défaut JPG)
    def format(self, variable, entree):
        self.mon_format = variable.get()
        if self.mon_format == ' ':
            self.mon_format = Application.option_list[0]

        self.entree = entree


    def medias(self):
            # On transforme les jpeg en jpg
            self.photos_a_renommer = glob.glob(self.entree + '/' + '*jpeg')
            if self.photos_a_renommer != []:
                for self.jpeg in self.photos_a_renommer:
                    os.rename(self.jpeg, self.jpeg[:-5] + '.jpg')
            self.medias_dossier = glob.glob(self.entree + '/' + '*' + self.mon_format)

            # Contrôle de présence du format choisit dans le dossier et si on a choisit un dossier de sortie
            if self.medias_dossier == []:
                self.pbar.destroy()
                showerror(title="Répertoire ne contenant pas de " + self.mon_format + ".",
                          message="Veuillez choisir un dossier source contenant des médias au format " + self.mon_format +".")
            elif self.sortie == '':
                self.pbar.destroy()
                showerror(title="ne contenant pas de " + self.mon_format + ".", message="Veuillez choisir un dossier de destination.")

            else:
                Tri.deplacement(self)
                Tri.verification(self)


    def deplacement(self):
        # Initialisation du compteur
        i = 0

        # On récupère la date de modif
        for self.medias in self.medias_dossier:
            self.m_time = os.path.getmtime(self.medias)
            self.local_time = time.ctime(self.m_time)

        # Pour les dossiers à créer on extrait l'année et le mois

            first, *middle, last = self.local_time.split()
            self.annee = last
            self.mois = self.local_time[4:7]
            self.mois_complet = dico_mois[self.mois]

            # Vérif et création du dossier
            self.sortie_complete = self.sortie + '/' + self.annee + '/' + self.mois_complet
            if not os.path.exists(self.sortie_complete):
                os.makedirs(self.sortie_complete)

        # Déplacement des fichiers sur date de création
            self.jpg_ok = self.medias.split('\\', 1)[1]
            self.file_source = self.entree + '/'
            self.file_destination = self.sortie_complete + '/'
        # Si le médias existe déja on passe au suivant
            if os.path.exists(self.file_destination + self.jpg_ok):
                continue
            else:
                shutil.move(self.file_source + self.jpg_ok, self.file_destination)
                i += 1

        self.pbar.destroy()
        self.n = str(i)
        showinfo("Information", "Tri des " +self.mon_format+ " terminé avec succès, " + self.n +" "+ self.mon_format+' triées.')

    def verification(self) :
        # Vérif si des médias sont encore dans le dossier source
        self.liste_restant = glob.glob(self.file_source + '*' + self.mon_format)

        if len(self.liste_restant) != 0:
            showerror('Information', "Des " +self.mon_format+ " n'ont pas été déplacé, "
                                        'car elles exisent déja dans le dossier de destination.')

app = Application()
app.mainloop()

